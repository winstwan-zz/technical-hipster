{
  "author": {
    "name": "Paul Vorbach",
    "email": "paul@vorb.de",
    "url": "https://vorb.de"
  },
  "name": "Comments",
  "description": "utilities for building a comment server for your website",
  "tags": [
    "comment",
    "discussion",
    "blog"
  ],
  "version": "0.5.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/pvorb/node-comments.git"
  },
  "bugs": {
    "url": "https://github.com/pvorb/node-comments/issues"
  },
  "main": "./comments.js",
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {
    "MD5": ">=0.0.0",
    "append": ">=0.1.1",
    "async": ">=0.1.18",
    "mongodb": ">=0.9.9",
    "pingback": ">=0.0.2"
  },
  "licenses": [
    {
      "type": "MIT license",
      "url": "http://vorb.de/license/mit.html"
    }
  ],
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "# Comments\n\n**Comments** is an abstraction layer for MongoDB that allows for easily\nproviding some commenting functionality.\n\n## Usage\n\n```javascript\nnew Comments(options)\n```\n\nCreates a new Comments object. This means, a connection to MongoDB is set up.\n\n*   `options` is an object that defines some DB connection parameters.\n\n    The default options are as follows:\n\n    ```javascript\n    {\n      host: 'localhost',      // - hostname of the server where mongodb is\n                              //   running\n      port: 27017,            // - port that is used by mongodb\n      name: 'website',        // - name of the mongodb database\n      collection: 'comments'  // - name of the collection that contains the\n                              //   comments\n    }\n    ```\n\n---\n\n```javascript\ncomments.saveComment(res, comment, saved)\n```\n\nAdds a new or updates a comment in the collection depending on if there already\nis a comment with the same `_id` property. If `comment` does not define an\n`_id` property, a new comment is created.\n\n*   `res` is a string defining the resource the comment belongs to.\n*   `comment` is an object that defines a comment. It is stored directly into\n    the collection. Any prior parsing is up to you. `comment.res` should be\n    defined for the later use of `comments.getComments`.\n*   `saved` is a callback function that takes three arguments `(error,\n    comment, action)`.\n    `error` is an `Error` object, when an error occurred, otherwise it is\n    `null`. `comment` is the saved comment object. `action` is a string. It can\n    either be `'create'`, `'update'` or `null`, if an error occured.\n\n---\n\n```javascript\ncomments.getComments(res, [[properties,] options,] received)\n```\n\nGives access to the comments of a resource.\n\n*   `res` is a string defining the resource that contains the comments that you\n    are looking for. If `res` is `null`, all comments in the collection will be\n    found.\n*   `properties [optional]` is an object that defines, which properties of the\n    comments shall be returned.\n\n    The default properties are as follows:\n\n    ```javascript\n    {\n      _id: true,\n      author: true,\n      website: true,\n      created: true,\n      message: true\n    }\n    ```\n*   `options [optional]` is an object that defines additional options according\n    to [section \"Query options\"][mongodb-doc-queries] like _sorting_ or\n    _paging_.\n\n    The default options are as follows:\n\n    ```javascript\n    {\n      sort: \"created\" // sort results by date of creation in ascending order\n    }\n    ```\n*   `received` is a callback function that takes two arguments\n    `(error, results)`. `error` is an `Error` object, when an error occurred,\n    otherwise it is `null`. `results` is a cursor to the result set of the\n    query. Look at [section \"Cursors\"][mongodb-doc-queries] for more\n    information on how to use them.\n\n---\n\n```javascript\ncomments.count(res, counted)\n```\n\nCounts the comments of a resource or the complete collection.\n\n*   `res` is a string defining the resource that contains the comments that you\n    are looking for. If `res` is `null`, all comments in the collection will be\n    counted.\n*   `counted` is a callback function that takes two arguments `(error, count)`.\n    `error` is an `Error` object, when an error occurred, otherwise it is\n    `null`. `count` is the number of comments for the resource or in the\n    collection.\n\n---\n\n```javascript\ncomments.close(done)\n```\n\nCloses the connection to the database.\n\n*   `done` is a callback function.\n\n---\n\n### Facilities for a JSON-REST API\n\n``` js\ncomments.getCommentsJSON(res, resp, received)\n```\n\nWrites a JSON object including the requested comments to a HTTP `ServerResponse`\nobject.\n\n*   `res` is a string defining the resource that contains the comments that you\n    are looking for. If `res` is `null`, all comments in the collection will be\n    returned.\n*   `resp` is a [`http.ServerResponse` object][http-server-resp]. (Please refer\n    to the version of Node.js that you are using.)\n*   `received` is a callback function that takes one argument `(error)`. `error`\n    is an `Error` object, when an error occurred, otherwise it is `null`.\n\n---\n\n``` js\ncomments.parseCommentPOST(res, req, parsed)\n```\n\nReads a url encoded string from a HTTP `ServerRequest` object.\n\n*   `res` is a string defining the resource where the comment should be saved.\n*   `req` is a [`http.ServerRequest` object][http-server-req]. (Please refer to\n    the version of Node.js that you are using.)\n*   `parsed` is a callback function that takes two arguments `(error, comment)`.\n    `error` is an `Error` object, when an error occurred, otherwise it is\n    `null`. `comment` is the parsed comment object.\n\n---\n\n``` js\ncomments.setCommentJSON(res, comment, resp, saved)\n```\n\nSaves or updates a comment for the defined resource and writes the corresponding\nHTTP status code to the given `ServerResponse` object.\n\n*   `res` is a string defining the resource where the comment should be saved.\n*   `comment` is an object that defines a comment.\n*   `resp` is a [`http.ServerResponse` object][http-server-resp]. (Please refer\n    to the version of Node.js that you are using.)\n*   `saved` is a callback function that takes one argument `(error)`. `error` is\n    an `Error` object, when an error occurred, otherwise it is `null`.\n\n## Installation\n\nYou need a running MongoDB before you can use **Comments**. On Debian\n\n```bash\napt-get install mongodb\n```\n\nThen install **Comments** with npm.\n\n```bash\nnpm install -g Comments\n```\n\n## Examples\n\nFor examples, look at the [tests][test-dir].\n\n## Bugs and Issues\n\nIf you encounter any bugs or issues, feel free to open an issue at\n[github][issues].\n\n## License\n\nThis package is licensed under a [MIT license][license].\n\n[mongodb-doc-indexes]:https://github.com/christkv/node-mongodb-native/blob/master/docs/indexes.md\n[mongodb-doc-queries]:https://github.com/christkv/node-mongodb-native/blob/master/docs/queries.md\n[http-server-resp]:http://nodejs.org/docs/v0.4.0/api/http.html#http.ServerResponse\n[http-server-req]:http://nodejs.org/docs/v0.4.0/api/http.html#http.ServerRequest\n[test-dir]:https://github.com/pvorb/node-comments/tree/master/test\n[issues]:https://github.com/pvorb/node-comments/issues\n[license]:http://vorb.de/license/mit.html\n",
  "readmeFilename": "README.mkd",
  "_id": "Comments@0.5.1",
  "dist": {
    "shasum": "435016045f47e7d2b976acf63bfb64194d8f320e"
  },
  "_from": "Comments@",
  "_resolved": "https://registry.npmjs.org/Comments/-/Comments-0.5.1.tgz"
}
